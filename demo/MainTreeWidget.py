from random import random

from PySide6 import QtWidgets, QtCore

from aacharts.aachartcreator.AAChartModel import AAChartModel
from aacharts.aachartcreator.AASeriesElement import AASeriesElement
from aacharts.aachartcreator.PYChartView import PYChartView
from aacharts.aaenum.AAEnum import AAChartType, AAChartAnimationType, AAChartStackingType
from aacharts.aatool.AAColor import AAColor
from demo.AAOptionsProComposer import AAOptionsProComposer


class MainTreeWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.chartView = PYChartView()
        testChartModel = self.configureColorfulBarChart()
        self.chartView.aa_drawChartWithChartModel(testChartModel)


        # https://gist.github.com/fredrikaverpil/1fa4f3360ffdb1e69507
        folderTree = QtWidgets.QTreeWidget()


        sectionTitleArr = [
            "Pro Types Chart --- ProÁ±ªÂûãÂõæË°®",
        ]


        chartTypeTitleArr = [
            # Pro types chart
           [  "sankeyChart---Ê°ëÂü∫Âõæ",
              "variablepieChart---ÂèØÂèòÂÆΩÂ∫¶ÁöÑÈ•ºÂõæ",
              "treemapChart---Ê†ëÂΩ¢Âõæ",
              "variwideChart---ÂèØÂèòÂÆΩÂ∫¶ÁöÑÊü±ÂΩ¢Âõæ",
              "sunburstChart---Êó≠Êó•Âõæ",
              "dependencywheelChart---ÂíåÂº¶Âõæ",
              "heatmapChart---ÁÉ≠ÂäõÂõæ",
              "packedbubbleChart---Ê∞îÊ≥°üéàÂ°´ÂÖÖÂõæ",
              "packedbubbleSplitChart---ÂúÜüéàÂ†ÜÁßØÂõæ",
              "vennChart---Èü¶ÊÅ©Âõæ",
              "dumbbellChart---ÂìëÈìÉÂõæ",
              "lollipopChart---Ê£íÊ£íÁ≥ñüç≠Âõæ",
              "streamgraphChart---ÊµÅÂõæ",
              "columnpyramidChart---ËßíÈî•Êü±ÂΩ¢Âõæ",
              "tilemapChart---Á†ñÂùóÂõæüß±||ËúÇÂ∑¢Âõæüêù",
              "simpleTreemapChart---ÁÆÄÂçïÁü©ÂΩ¢Ê†ëüå≤Âõæ",
              "drilldownTreemapChart---ÂèØ‰∏ãÈíªÁöÑÁü©ÂΩ¢Ê†ëüå≤Âõæ",
              "xrangeChart---XËΩ¥ËåÉÂõ¥Âõæ||ÁîòÁâπÂõæ||Êù°Á†ÅÂõæ",
              "vectorChart---ÂêëÈáèÂõæüèπ",
              "bellcurveChart---Ë¥ùÂ∞îÊõ≤Á∫øÂõæ",
              "timelineChart---Êó∂Â∫èÂõæ‚åöÔ∏è",
              "itemChart---ËÆÆ‰ºöÈ°πÁõÆÂõæ",
              "windbarbChart---È£éÁæΩÂõæ",
              "networkgraphChart---ÂäõÂØºÂÖ≥Á≥ªÂõæ",
              "wordcloudChart---ËØç‰∫ëÂõæ",
              "eulerChart---Ê¨ßÊãâÂõæ",
              "organizationChart---ÁªÑÁªáÁªìÊûÑÂõæ",
              "arcdiagramChart1---ÂºßÂΩ¢Âõæ1",
              "arcdiagramChart2---ÂºßÂΩ¢Âõæ2",
              "arcdiagramChart3---ÂºßÂΩ¢Âõæ3",
              "flameChart---ÁÅ´ÁÑ∞üî•Âõæ",
              "packedbubbleSpiralChart---Ê∏êËøõÂèòÂåñÁöÑÊ∞îÊ≥°üéàÂõæ"
            ],
        ]

        for sectionIndex in range(len(sectionTitleArr)):
            sectionTitleStr = sectionTitleArr[sectionIndex]
            sectionIndexStr = f"{sectionIndex + 1}"
            sectionRoot = QtWidgets.QTreeWidgetItem(folderTree, [sectionIndexStr + "  " + sectionTitleStr])
            sectionRoot.setData(1, QtCore.Qt.EditRole, sectionIndexStr)

            singleSectionChartTypeTitleArr = chartTypeTitleArr[sectionIndex]
            for rowIndex in range(len(singleSectionChartTypeTitleArr)):
                rowIndexStr = f"{rowIndex + 1}"
                chartTypeStr = singleSectionChartTypeTitleArr[rowIndex]
                rowRoot = QtWidgets.QTreeWidgetItem(sectionRoot, [rowIndexStr + "  " + chartTypeStr])
                rowRoot.setData(1, QtCore.Qt.EditRole, sectionIndexStr)  # Data set to column 2, which is not visible
                rowRoot.setData(2, QtCore.Qt.EditRole, rowIndexStr)  # Data set to column 2, which is not visible

        def printer(treeItem):
            foldername = treeItem.text(0)
            sectionIndex = treeItem.text(1)
            rowIndexStr = treeItem.text(2)
            # treeItem.indexOfChild()
            print(foldername + ': ' + f"(Section Index: {sectionIndex})" + f"(Row Index: {rowIndex})")

            if len(rowIndexStr) > 0:
                sectionIndexValue = int(sectionIndex)
                rowIndexValue = int(rowIndexStr) - 1
                if sectionIndexValue == 1:
                   aaOptions = self.chartConfigurationWithSelectedIndex(rowIndexValue)
                   self.chartView.aa_drawChartWithChartOptions(aaOptions)


        folderTree.itemClicked.connect(lambda: printer(folderTree.currentItem()))

        folderTree.currentColumn()
        # QtÂ¶Ç‰Ωï‰ΩøQTreeWidgetÂßãÁªà‰øùÊåÅÂ±ïÂºÄÔºühttps://blog.csdn.net/can3981132/article/details/52273800
        folderTree.setItemsExpandable(False)
        folderTree.expandAll()

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.chartView)
        self.layout.addWidget(folderTree)

        self.setWindowTitle("‰Ω†Â•Ω‰∏ñÁïå")

    def printer(treeItem):
        foldername = treeItem.text(0)
        comment = treeItem.text(1)
        data = treeItem.text(2)
        print(foldername + ': ' + comment + ' (' + data + ')')


    @QtCore.Slot()
    def magic(self):
        self.text.setText(random.choice(self.hello))

    def configureColorfulBarChart(self):
        colorsNameArr = [
            "red",
            "orange",
            "yellow",
            "green",
            "cyan",
            "blue",
            "purple",
            "gray",
            "darkGray",
            "lightGray",
            "magenta",
            "brown",
            "black"
        ]

        colorsArr = [
            AAColor.red,
            AAColor.orange,
            AAColor.yellow,
            AAColor.green,
            AAColor.cyan,
            AAColor.blue,
            AAColor.purple,
            AAColor.gray,
            AAColor.darkGray,
            AAColor.lightGray,
            AAColor.magenta,
            AAColor.brown,
            AAColor.black
        ]

        return (AAChartModel()
            .chartTypeSet(AAChartType.bar)
            .animationTypeSet(AAChartAnimationType.bounce)
            .titleSet("Colorful Chart")
            .subtitleSet("use AAColor to get color string")
            .dataLabelsEnabledSet(False)
            .categoriesSet(colorsNameArr)
            .colorsThemeSet(colorsArr)
            .stackingSet(AAChartStackingType.percent)
            .seriesSet([
            AASeriesElement()
                .nameSet("Tokyo")
                .dataSet([7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6])
                .colorByPointSet(True)
        ]))


    # https://www.highcharts.com/demo
    def chartConfigurationWithSelectedIndex(self, selectedIndex):
        if selectedIndex ==  0: return AAOptionsProComposer.sankeyChart()
        elif selectedIndex ==  1: return AAOptionsProComposer.variablepieChart()
        elif selectedIndex ==  2: return AAOptionsProComposer.treemapWithLevelsData()
        elif selectedIndex ==  3: return AAOptionsProComposer.variwideChart()
        elif selectedIndex ==  4: return AAOptionsProComposer.sunburstChart()
        elif selectedIndex ==  5: return AAOptionsProComposer.dependencywheelChart()
        elif selectedIndex ==  6: return AAOptionsProComposer.heatmapChart()
        elif selectedIndex ==  7: return AAOptionsProComposer.packedbubbleChart()
        elif selectedIndex ==  8: return AAOptionsProComposer.packedbubbleSplitChart()
        elif selectedIndex ==  9: return AAOptionsProComposer.vennChart()
        elif selectedIndex == 10: return AAOptionsProComposer.dumbbellChart()
        elif selectedIndex == 11: return AAOptionsProComposer.lollipopChart()
        elif selectedIndex == 12: return AAOptionsProComposer.streamgraphChart()
        elif selectedIndex == 13: return AAOptionsProComposer.columnpyramidChart()
        elif selectedIndex == 14: return AAOptionsProComposer.tilemapChart()
        elif selectedIndex == 15: return AAOptionsProComposer.treemapWithColorAxisData()
        elif selectedIndex == 16: return AAOptionsProComposer.drilldownTreemapChart()
        elif selectedIndex == 17: return AAOptionsProComposer.xrangeChart()
        elif selectedIndex == 18: return AAOptionsProComposer.vectorChart()
        elif selectedIndex == 19: return AAOptionsProComposer.bellcurveChart()
        elif selectedIndex == 20: return AAOptionsProComposer.timelineChart()
        elif selectedIndex == 21: return AAOptionsProComposer.itemChart()
        elif selectedIndex == 22: return AAOptionsProComposer.windbarbChart()
        elif selectedIndex == 23: return AAOptionsProComposer.networkgraphChart()
        elif selectedIndex == 24: return AAOptionsProComposer.wordcloudChart()
        elif selectedIndex == 25: return AAOptionsProComposer.eulerChart()
        elif selectedIndex == 26: return AAOptionsProComposer.organizationChart()
        elif selectedIndex == 27: return AAOptionsProComposer.arcdiagramChart1()
        elif selectedIndex == 28: return AAOptionsProComposer.arcdiagramChart2()
        elif selectedIndex == 29: return AAOptionsProComposer.arcdiagramChart3()
        elif selectedIndex == 30: return AAOptionsProComposer.flameChart()
        elif selectedIndex == 31: return AAOptionsProComposer.packedbubbleSpiralChart()



